publishGenericEnvVariables: true
deploy:
  phases:
    install:
      commands:
      - npm install -g aws-cdk@2.128.0
      - pip install -r requirements.txt
    build:
      commands:
      - aws iam create-service-linked-role --aws-service-name emr-containers.amazonaws.com || true
      - cdk deploy --require-approval never --progress events --app "python app.py" --outputs-file ./cdk-exports-rbac.json ${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}-rbac
      - python -c "import json; file=open('cdk-exports-rbac.json'); print(json.load(file)['${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}-rbac']['metadata'])" > rbac.json
      - export EMR_SERVICE_ACCOUNT_ROLE=arn:aws:iam::${AWS_ACCOUNT_ID}:role/AWSServiceRoleForAmazonEMRContainers
      # Assume the EKS_CLUSTER_ADMIN_ROLE and add our new service account role as a user in the aws_auth ConfigMap
      # Track https://github.com/aws/aws-cdk/issues/19753
      - eval $(aws sts assume-role --role-arn ${SEEDFARMER_PARAMETER_EKS_CLUSTER_ADMIN_ROLE_ARN} --role-session-name test | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')
      - |
        eksctl get iamidentitymapping --cluster ${SEEDFARMER_PARAMETER_EKS_CLUSTER_NAME} --arn ${EMR_SERVICE_ACCOUNT_ROLE} \
        && echo "IAM Identity Mapping already found" \
        || eksctl create iamidentitymapping --cluster ${SEEDFARMER_PARAMETER_EKS_CLUSTER_NAME} --region ${AWS_REGION} --arn ${EMR_SERVICE_ACCOUNT_ROLE} --username emr-containers
      # Un-Assume the EKS_CLUSTER_ADMIN_ROLE or the rest of the deploy will fail
      - unset AWS_ACCESS_KEY_ID && unset AWS_SECRET_ACCESS_KEY && unset AWS_SESSION_TOKEN
      - cdk deploy --require-approval never --progress events --app "python app.py" --outputs-file ./cdk-exports-emr.json ${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}
      - python -c "import json; file=open('cdk-exports-emr.json'); print(json.load(file)['${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}']['metadata'])" > emr.json
      # Merge 2 stacks outputs
      - export SEEDFARMER_MODULE_METADATA=$(jq -sc '.[0] * .[1]' rbac.json emr.json)
destroy:
  phases:
    install:
      commands:
      - npm install -g aws-cdk@2.128.0
      - pip install -r requirements.txt
    build:
      commands:
      - cdk destroy --force --app "python app.py" ${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}
      - cdk destroy --force --app "python app.py" ${SEEDFARMER_PROJECT_NAME}-${SEEDFARMER_DEPLOYMENT_NAME}-${SEEDFARMER_MODULE_NAME}-rbac

